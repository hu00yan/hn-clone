import { API_CONFIG, API_ENDPOINTS } from \"../config\";\n\ntype ApiResponse<T> = {\n  data: T;\n  success: boolean;\n  error?: string;\n};\n\nexport class ApiClient {\n  private baseUrl: string;\n  private defaultHeaders: Record<string, string>;\n\n  constructor(baseUrl?: string) {\n    this.baseUrl = baseUrl || API_CONFIG.BASE_URL;\n    this.defaultHeaders = API_CONFIG.HEADERS;\n  }\n\n  private async request<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<ApiResponse<T>> {\n    const url = \`\${this.baseUrl}\${endpoint}\`;\n    \n    try {\n      const response = await fetch(url, {\n        ...options,\n        headers: {\n          ...this.defaultHeaders,\n          ...options.headers,\n        },\n      });\n\n      if (!response.ok) {\n        throw new Error(\`HTTP \${response.status}: \${response.statusText}\`);\n      }\n\n      const data = await response.json();\n      return {\n        data,\n        success: true,\n      };\n    } catch (error) {\n      return {\n        data: null as any,\n        success: false,\n        error: error instanceof Error ? error.message : \"Unknown error\",\n      };\n    }\n  }\n\n  async get<T>(endpoint: string): Promise<ApiResponse<T>> {\n    return this.request<T>(endpoint, { method: \"GET\" });\n  }\n\n  async post<T>(endpoint: string, data?: any): Promise<ApiResponse<T>> {\n    return this.request<T>(endpoint, {\n      method: \"POST\",\n      body: data ? JSON.stringify(data) : undefined,\n    });\n  }\n\n  async put<T>(endpoint: string, data?: any): Promise<ApiResponse<T>> {\n    return this.request<T>(endpoint, {\n      method: \"PUT\",\n      body: data ? JSON.stringify(data) : undefined,\n    });\n  }\n\n  async delete<T>(endpoint: string): Promise<ApiResponse<T>> {\n    return this.request<T>(endpoint, { method: \"DELETE\" });\n  }\n}

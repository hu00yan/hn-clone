import { ApiClient } from \"./client\";\nimport { API_ENDPOINTS } from \"../config\";\nimport { User, Post, Comment, AuthResponse } from \"../types\";\n\nexport class ApiService {\n  private client: ApiClient;\n\n  constructor(baseUrl?: string) {\n    this.client = new ApiClient(baseUrl);\n  }\n\n  // Authentication\n  async login(email: string, password: string): Promise<ApiResponse<AuthResponse>> {\n    return this.client.post<AuthResponse>(API_ENDPOINTS.AUTH.LOGIN, { email, password });\n  }\n\n  async register(email: string, username: string, password: string): Promise<ApiResponse<AuthResponse>> {\n    return this.client.post<AuthResponse>(API_ENDPOINTS.AUTH.REGISTER, { email, username, password });\n  }\n\n  // Posts\n  async getHotPosts(): Promise<ApiResponse<Post[]>> {\n    return this.client.get<Post[]>(API_ENDPOINTS.POSTS.HOT);\n  }\n\n  async getNewPosts(): Promise<ApiResponse<Post[]>> {\n    return this.client.get<Post[]>(API_ENDPOINTS.POSTS.NEW);\n  }\n\n  async getPost(id: number): Promise<ApiResponse<Post>> {\n    return this.client.get<Post>(\`\${API_ENDPOINTS.POSTS.DETAIL}/\${id}\`);\n  }\n\n  async submitPost(title: string, url?: string, text?: string, token?: string): Promise<ApiResponse<Post>> {\n    const headers: Record<string, string> = {};\n    if (token) {\n      headers.Authorization = \`Bearer \${token}\`;\n    }\n    return this.client.post<Post>(API_ENDPOINTS.POSTS.SUBMIT, { title, url, text }, { headers });\n  }\n\n  // Votes\n  async votePost(postId: number, voteType: number, token?: string): Promise<ApiResponse<Post>> {\n    const headers: Record<string, string> = {};\n    if (token) {\n      headers.Authorization = \`Bearer \${token}\`;\n    }\n    return this.client.post<Post>(\`\${API_ENDPOINTS.VOTES.POST}/\${postId}\`, { voteType }, { headers });\n  }\n\n  // Comments\n  async getComments(postId: number): Promise<ApiResponse<Comment[]>> {\n    return this.client.get<Comment[]>(\`\${API_ENDPOINTS.COMMENTS.POST}/\${postId}\`);\n  }\n\n  async submitComment(postId: number, text: string, parentId?: number, token?: string): Promise<ApiResponse<Comment>> {\n    const headers: Record<string, string> = {};\n    if (token) {\n      headers.Authorization = \`Bearer \${token}\`;\n    }\n    return this.client.post<Comment>(\`\${API_ENDPOINTS.COMMENTS.POST}/\${postId}\`, { text, parentId }, { headers });\n  }\n}\n\nexport type ApiResponse<T> = {\n  data: T;\n  success: boolean;\n  error?: string;\n};
